<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns="flexlib.mdi.containers.*"
			xmlns:flc="flexlib.controls.*" visible="false"
			implements="org.bigbluebutton.common.IBbbModuleWindow"
			title="{windowTitle}"
			initialize="init()"
			creationComplete="onCreationComplete()" 
			xmlns:mate="http://mate.asfusion.com/" 
			xmlns:controls="flexlib.controls.*">
	
	<mate:Listener type="{ListenersEvent.ROOM_MUTE_STATE}" method="roomMuteStateChange" />
	<mate:Listener type="{ListenersEvent.REGISTER_LISTENERS}" method="registerListeners" />
	<mate:Listener type="{ListenersEvent.SET_LOCAL_MODERATOR_STATUS}" method="{setModerator}" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{ShortcutEvent.MUTE_ME_EVENT}" method="muteMeHandler" />
	
	<mx:Script>
		<![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import flash.events.MouseEvent;
      import flash.sampler.getInvocationCount;
      
      import flexlib.mdi.events.MDIWindowEvent;
      
      import mx.binding.utils.BindingUtils;
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.controls.Image;
      import mx.controls.Label;
      import mx.events.ListEvent;
      import mx.messaging.channels.AMFChannel;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.events.LocaleChangeEvent;
      import org.bigbluebutton.core.events.VoiceConfEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.listeners.events.ListenersCommand;
      import org.bigbluebutton.modules.listeners.events.ListenersEvent;
      import org.bigbluebutton.modules.listeners.model.ListenerOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] private var images:Images= new Images();			
			private var _xPosition:int;
			private var _yPosition:int;
 			
			[Bindable] private var muteAllIcon:Class = images.sound_mute; 
			[Bindable] private var unmuteAllIcon:Class = images.sound_none;
			[Bindable] private var kickIcon:Class = images.eject_user;
			[Bindable] public var listeners:ArrayCollection = new ArrayCollection();
			[Bindable] public var moderator:Boolean;
			[Bindable] private var windowTitle:String = ResourceUtil.getInstance().getString('bbb.listeners.title', ["",""]);			
			[Bindable] public var listenerOptions:ListenerOptions;
			[Bindable] private var showPushToTalkBtn:Boolean = UserManager.getInstance().getConference().voiceLocked &&
				UserManager.getInstance().getConference().voiceJoined;
			[Bindable] private var baseIndex:int;
			
			private var dispatcher:Dispatcher;
			private var keyCombos:Object;
			
			private function init():void {
				baseIndex = listenerOptions.baseTabIndex;
			}
			
			private function onCreationComplete():void {
				BindingUtils.bindSetter(updateNumberOfListeners, listeners, "length");		
				BindingUtils.bindSetter(updateShowPushToTalkBtn, UserManager.getInstance().getConference(), "voiceLocked");
				BindingUtils.bindSetter(updateShowPushToTalkBtn, UserManager.getInstance().getConference(), "voiceJoined");
				this.visible = listenerOptions.windowVisible;	
				
				titleBarOverlay.tabIndex = baseIndex;
				
				minimizeBtn.tabIndex = baseIndex+1;
				maximizeRestoreBtn.tabIndex = baseIndex+2;
				closeBtn.tabIndex = baseIndex+3;	
				
				dispatcher = new Dispatcher();
				hotkeyCapture();
				resourcesChanged();
			}
			
			private function remoteMinimize(e:ShortcutEvent):void{
				if (!minimized){
					this.minimize();
				}
			}
			
			private function remoteMaximize(e:ShortcutEvent):void{
				if (!maximized && !minimized){
					this.maximize();
				}
				else{
					this.restore();
				}				
			}

		    private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array
			}
		
		    private function hotkeyCapture():void{
		      this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
		      ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
		    }
		
			// Handle general-access hotkeys, regardless of what window the user is focused in
		    private function handleKeyDown(e:KeyboardEvent) :void {
		      var modifier:String = ExternalInterface.call("determineModifier");
			  loadKeyCombos(modifier);			  
			  var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") +
		                            (e.altKey   ? "alt+"     : "") + e.keyCode;		                              
		      if (keyCombos[keyPress]) {
		        dispatcher.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
		      }
		    }
			
			private function focusWindow(e:ShortcutEvent):void{
				focusManager.setFocus(titleBarOverlay);
			}
			
			private function updateShowPushToTalkBtn(show:Boolean):void {
				showPushToTalkBtn = UserManager.getInstance().getConference().voiceJoined &&
									(UserManager.getInstance().getConference().amIModerator() || 
										!UserManager.getInstance().getConference().voiceLocked);
			}
			
			private function updateNumberOfListeners(numListeners:int):void {
				if (numListeners > 4)
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', [":", numListeners]) ;
				else 
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', ["", ""]) ;
				
				if (moderator && numListeners > 0) {
					muteAllBtn.visible = true;
				} else {
					muteAllBtn.visible = false;
				}
			}
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			public function getPrefferedPosition():String{
				return listenerOptions.position;
			}
			
			public function setMuteState(mute:Boolean):void{
				if (mute){
					muteAllBtn.toolTip = ResourceUtil.getInstance().getString('bbb.listeners.unmuteAllBtn.toolTip');
					muteAllBtn.selected = true;
					muteAllIcon = images.sound_mute;
				} else{
					muteAllBtn.toolTip = ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip');
					muteAllBtn.selected = false;
					muteAllIcon = images.sound_none;
				}
			}
			
			private function toggleMuteState():void{
				if (muteAllBtn.selected) muteAllListeners();
				else if (!muteAllBtn.selected) unmuteAllListeners();
				setMuteState(muteAllBtn.selected);
			}
			
			private function toggleMuteMeState():void{
				if (UserManager.getInstance().getConference().voiceLocked && ! UserManager.getInstance().getConference().amIModerator()) return;
				
				var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
				e.userid = UserManager.getInstance().getConference().getMyVoiceUserId();
				e.mute = !UserManager.getInstance().getConference().isMyVoiceMuted();
				dispatchEvent(e);
			}
			
			private function muteAllListeners():void{
				var muteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_ALL);
				dispatchEvent(muteCommand);
			}
			
			private function unmuteAllListeners():void{
				var unmuteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.UNMUTE_ALL);
				dispatchEvent(unmuteCommand);
			}
			
			private function roomMuteStateChange(e:ListenersEvent):void{
				setMuteState(e.mute_state);
			}
			
			private function registerListeners(e:ListenersEvent):void{
				this.listeners = e.listeners.listeners;
				/*
				 * Bind into this object to display the number of listeners.
				 */
				BindingUtils.bindSetter(updateNumberOfListeners, listeners, "length");
			}
			
			private function setModerator(e:ListenersEvent):void{
				moderator = e.moderator;
				showCloseButton = false;
			}
						
			private function onItemRollOver(e:ListEvent):void{
				var item:ListenerItem = e.itemRenderer as ListenerItem;
				item.onRollOver();
			}
			
			private function onItemRollOut(e:ListEvent):void{
				var item:ListenerItem = e.itemRenderer as ListenerItem;
				item.onRollOut();
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();				
				if (listeners.length > 4)
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', [":", listeners.length]);
				else 
					windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', ["",""]);
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.listeners.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.listeners.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.listeners.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.listeners.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:LocaleChangeEvent):void{
				resourcesChanged();
			}
			
			private function muteMeHandler(e:ShortcutEvent):void{
				toggleMuteMeState();
			}
			
			override protected function hideAllChildren():void {
				listenersList.includeInLayout=false;
			}
			
			override protected function showAllChildren():void {
				listenersList.includeInLayout=true;
			}
			
		]]>
	</mx:Script>
    	<mx:List id="listenersList" height="100%" width="100%"
 			itemRenderer="org.bigbluebutton.modules.listeners.views.ListenerItem" 
            dragEnabled="false" dataProvider="{listeners}"
			itemRollOver="onItemRollOver(event)"
			itemRollOut="onItemRollOut(event)"
			tabIndex="{baseIndex+4}"
			accessibilityName="{ResourceUtil.getInstance().getString('bbb.listeners.userList')}">          
    	</mx:List>				
    	    	
    	<mx:ControlBar width="100%">
			<flc:CanvasButton id="pushToTalkBtn" visible="{showPushToTalkBtn}" 
							  toolTip="{UserManager.getInstance().getConference().voiceMuted ? ResourceUtil.getInstance().getString('bbb.listeners.pushToTalk.toolTip') : ResourceUtil.getInstance().getString('bbb.listeners.pushToMute.toolTip')}" 
							  click="toggleMuteMeState()" height="30" maxWidth="180"
							  tabIndex="{baseIndex+5}">
				<mx:HBox verticalAlign="middle" horizontalGap="0" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
					<mx:Image source="{UserManager.getInstance().getConference().voiceMuted ? images.sound_mute : images.sound_none}" />
					<mx:Label text="{UserManager.getInstance().getConference().voiceMuted ? ResourceUtil.getInstance().getString('bbb.listeners.talk') : ResourceUtil.getInstance().getString('bbb.listeners.mute')}" />
				</mx:HBox> 
			</flc:CanvasButton>
     	   	<mx:Spacer width="100%"/>
			<flc:CanvasButton id="muteAllBtn" visible="false" toggle="true" selected="false"
							  toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip')}" 
							  click="toggleMuteState()" height="30" maxWidth="180"
							  tabIndex="{baseIndex+6}">
				<mx:HBox verticalAlign="middle" horizontalGap="0" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
					<mx:Label text="{muteAllBtn.selected ?  ResourceUtil.getInstance().getString('bbb.listeners.unmuteAllBtn.toolTip') : ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip')}"
							  tabIndex="{baseIndex+7}" />
				</mx:HBox> 
			</flc:CanvasButton>
    	</mx:ControlBar>

</MDIWindow>
